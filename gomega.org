* [#A] golang BDD test: ginkgo gomega                        :IMPORTANT:
| Name                        | Summary                                                    |
|-----------------------------+------------------------------------------------------------|
| ginkgo                      | BDD Testing Framework for Go http://onsi.github.io/ginkgo/ |
| [[https://www.howtoinstall.co/en/ubuntu/xenial/golang-ginkgo-dev][Ubuntu install ginkgo]]       | =apt-get install golang-ginkgo-dev=                        |
|-----------------------------+------------------------------------------------------------|
| gomega                      | Ginkgo's Preferred Matcher Library                         |
| gomega validation functions | https://godoc.org/github.com/onsi/gomega                   |
|                             | http://onsi.github.io/gomega/ https://github.com/onsi      |

Check
| Name              | Summary                                                              |
|-------------------+----------------------------------------------------------------------|
| Equal             | primitives comparision                                               |
| reflect.DeepEqual | recursively dig into maps, slices, arrays, and even your own structs |
| BeEquivalentTo    | compare across different types                                       |
|-------------------+----------------------------------------------------------------------|
| ContainSubstring  |                                                                      |
| HavePrefix        |                                                                      |
|-------------------+----------------------------------------------------------------------|
| Equal             |                                                                      |
| BeTrue            |                                                                      |
| BeNil             |                                                                      |
** TODO Making Assertions in Helper Functions
http://onsi.github.io/gomega/#making-assertions-in-helper-functions

#+BEGIN_SRC go
var _ = Describe("Turbo-encabulator", func() {
    ...
    func assertTurboEncabulatorContains(components ...string) {
        teComponents, err := turboEncabulator.GetComponents()
        Expect(err).NotTo(HaveOccurred())

        Expect(teComponents).To(HaveLen(components))
        for _, component := range components {
            Expect(teComponents).To(ContainElement(component))
        }
    }

    It("should have components", func() {
        assertTurboEncabulatorContains("semi-boloid slots", "grammeters")
    })
})
#+END_SRC
** TODO NotTo vs ToNot
http://onsi.github.io/gomega/
#+BEGIN_EXAMPLE
  Expect(ACTUAL).To(Equal(EXPECTED))
  Expect(ACTUAL).NotTo(Equal(EXPECTED))
  Expect(ACTUAL).ToNot(Equal(EXPECTED))
#+END_EXAMPLE
** #  --8<-------------------------- separator ------------------------>8-- :noexport:
** DONE GomegaAssertion interface: Should, ShouldNot, To, ToNot, NotTo
   CLOSED: [2018-07-04 Wed 21:52]
http://onsi.github.io/gomega/
#+BEGIN_EXAMPLE
  Expect(ACTUAL).To(Equal(EXPECTED))
  Expect(ACTUAL).NotTo(Equal(EXPECTED))
  Expect(ACTUAL).ToNot(Equal(EXPECTED))
#+END_EXAMPLE

http://onsi.github.io/gomega/

https://godoc.org/github.com/onsi/gomega

Expect(err).To(HaveOccurred())
Expect("foo").To(Equal("foo"))
** DONE example: gexec-example
   CLOSED: [2018-07-04 Wed 21:52]
https://github.com/Amit-PivotalLabs/gexec-example
** DONE Add msg to assertions: Ω(SprocketsAreLeaky()).Should(BeFalse(), "Sprockets shouldn't leak")
   CLOSED: [2018-07-04 Wed 21:52]
** DONE [#A] Asynchronous Assertions: Eventually, Consistently
   CLOSED: [2018-07-04 Wed 22:37]
http://onsi.github.io/gomega/#making-asynchronous-assertions

- Eventually will poll the passed in function (which must have zero-arguments and at least one return value) repeatedly and check the return value against the GomegaMatcher
  Eventually then blocks until the match succeeds or until a timeout interval has elapsed.

- Consistently checks that an assertion passes for a period of time. It does this by polling its argument repeatedly during the period. It fails if the matcher ever fails during that period.

#+BEGIN_EXAMPLE
Eventually(func() []int {
    return thing.SliceImMonitoring
}).Should(HaveLen(2))

Eventually(func() string {
    return thing.Status
}).ShouldNot(Equal("Stuck Waiting"))
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Consistently(func() []int {
    return thing.MemoryUsage()
}).Should(BeNumerically("<", 10))
#+END_EXAMPLE
#+BEGIN_SRC go
	Context("when exitCode flag is passed explicitly", func() {
		BeforeEach(func() {
			command = exec.Command(pathToExecutable, "-exitCode=33")
		})

		It("exits with the passed in value", func() {
			session, err := gexec.Start(command, GinkgoWriter, GinkgoWriter)
			Ω(err).ShouldNot(HaveOccurred())

			Eventually(session).Should(gexec.Exit(33))
		})
	})
#+END_SRC
** #  --8<-------------------------- separator ------------------------>8-- :noexport:
** ginkgo structure
https://github.com/onsi/ginkgo

Structure your BDD-style tests expressively:

Nestable Describe, Context and When container blocks
BeforeEach and AfterEach blocks for setup and teardown
It and Specify blocks that hold your assertions
JustBeforeEach blocks that separate creation from configuration (also known as the subject action pattern).
BeforeSuite and AfterSuite blocks to prep for and cleanup after a suite.
** Concept: defer
** Concept: context
** #  --8<-------------------------- separator ------------------------>8-- :noexport:
** TODO DescribeTable
** TODO gexec.Build("github.com/amitkgupta/gexec-example"): https://github.com/Amit-PivotalLabs/gexec-example/blob/master/gexec_example_test.go#L17
How I distribute my test code
* org-mode configuration
#+STARTUP: overview customtime noalign logdone showall
#+TAGS: ARCHIVE(a) WORK(w) LIFE(l) EMACS(e) IMPORTANT(i) Difficult(d) Communication(c) RECOMMENDATE(r) Tool(t) Habit(h) noexport(n) Share (s) BLOG(b)
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+DRAWERS: HIDDEN CODE CONF EMAIL WEBPAGE SNIP
#+PRIORITIES: A D C
#+ARCHIVE: %s_done::** Finished Tasks
#+LATEX_HEADER: \usepackage[margin=0.6in]{geometry}
#+LaTeX_CLASS_OPTIONS: [8pt]
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage{lastpage}
#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \pagestyle{fancy}
#+LATEX_HEADER: \fancyhf{}
#+LATEX_HEADER: \rhead{Updated: \today}
#+LATEX_HEADER: \rfoot{\thepage\ of \pageref{LastPage}}
#+LATEX_HEADER: \lfoot{\href{https://github.com/dennyzhang/cheatsheet-kubernetes-A4}{GitHub: https://github.com/dennyzhang/cheatsheet-kubernetes-A4}}
#+LATEX_HEADER: \lhead{\href{https://cheatsheet.dennyzhang.com}{Blog URL: https://cheatsheet.dennyzhang.com/cheatsheet-kubernetes-A4}}
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+OPTIONS: toc:2 \n:t ^:nil creator:nil d:nil
